{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyBGYCJYGn34_y-RSA_usMBq8IYghHJrP3M\",\n  authDomain: \"crwn-bdd.firebaseapp.com\",\n  databaseURL: \"https://crwn-bdd.firebaseio.com\",\n  projectId: \"crwn-bdd\",\n  storageBucket: \"crwn-bdd.appspot.com\",\n  messagingSenderId: \"162448512064\",\n  appId: \"1:162448512064:web:74f702cb6762278f5dbba5\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snap = await userRef.get();\n  if (snap.exists) return userRef; // do nothing if user exists, return userRef\n\n  const {\n    displayName,\n    email\n  } = userAuth;\n  const createAt = new Date();\n\n  try {\n    userRef.set({\n      displayName,\n      email,\n      createAt,\n      ...additionalData\n    });\n  } catch (error) {\n    console.log('error creating user', error.message);\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, docs) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  docs.forEach(doc => {\n    const docRef = collectionRef.doc();\n    console.log(docRef);\n    batch.set(docRef, doc);\n  });\n  return await batch.commit();\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/anaruz/www/react/crwn-cloth-learning/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snap","get","exists","displayName","email","createAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","docs","collectionRef","collection","batch","forEach","docRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,0BAFD;AAGXC,EAAAA,WAAW,EAAE,iCAHF;AAIXC,EAAAA,SAAS,EAAE,UAJA;AAKXC,EAAAA,aAAa,EAAE,sBALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAEzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAnB;AAGA,MAAGD,IAAI,CAACE,MAAR,EAAgB,OAAON,OAAP,CARyD,CAQ1C;;AAE/B,QAAM;AAACO,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAAuBV,QAA7B;AAEA,QAAMW,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;;AAGA,MAAI;AAEAV,IAAAA,OAAO,CAACW,GAAR,CAAY;AACRJ,MAAAA,WADQ;AAERC,MAAAA,KAFQ;AAGRC,MAAAA,QAHQ;AAIR,SAAGV;AAJK,KAAZ;AAMH,GARD,CAQE,OAAOa,KAAP,EAAc;AAEZC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;;AAED,SAAOf,OAAP;AACH,CA7BM;AAgCP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,IAAtB,KAA+B;AAEpE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AAEAH,EAAAA,IAAI,CAACI,OAAL,CAAcpB,GAAG,IAAI;AAEjB,UAAMqB,MAAM,GAAGJ,aAAa,CAACjB,GAAd,EAAf;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AAEAF,IAAAA,KAAK,CAACV,GAAN,CAAUY,MAAV,EAAkBrB,GAAlB;AAEH,GARD;AAUA,SAAO,MAAMmB,KAAK,CAACG,MAAN,EAAb;AACH,CAjBM,C,CAkBP;;AAEApC,QAAQ,CAACqC,aAAT,CAAuBpC,MAAvB;AAEA,OAAO,MAAMqC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAM0B,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nconst config = {\n    apiKey: \"AIzaSyBGYCJYGn34_y-RSA_usMBq8IYghHJrP3M\",\n    authDomain: \"crwn-bdd.firebaseapp.com\",\n    databaseURL: \"https://crwn-bdd.firebaseio.com\",\n    projectId: \"crwn-bdd\",\n    storageBucket: \"crwn-bdd.appspot.com\",\n    messagingSenderId: \"162448512064\",\n    appId: \"1:162448512064:web:74f702cb6762278f5dbba5\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    if (!userAuth) return\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\n    const snap = await userRef.get()\n\n\n    if(snap.exists) return userRef // do nothing if user exists, return userRef\n    \n    const {displayName, email} = userAuth\n\n    const createAt = new Date()\n\n\n    try {\n        \n        userRef.set({\n            displayName,\n            email,\n            createAt,\n            ...additionalData\n        })\n    } catch (error) {\n        \n        console.log('error creating user', error.message)\n    }\n\n    return userRef\n}\n\n\nexport const addCollectionAndDocuments = async (collectionKey, docs) => {\n\n    const collectionRef = firestore.collection(collectionKey)\n\n    const batch = firestore.batch()\n\n    docs.forEach( doc => {\n      \n        const docRef = collectionRef.doc()\n\n        console.log(docRef)\n\n        batch.set(docRef, doc)\n        \n    })\n\n    return await batch.commit()\n}\n// Initialize Firebase\n\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({prompt: 'select_account'})\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}