{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from './../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const snapShot = yield userRef.get();\n  yield put(signInSuccess({\n    id: snapShot.id,\n    ...snapShot.data()\n  }));\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/anaruz/www/react/crwn-cloth-learning/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","snapShot","get","id","data","signInWithGoogle","user","signInWithPopup","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAGA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAUC,aAAV,EAAyBC,aAAzB,QAA6C,gBAA7C;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,iCAAhF;AAGA,OAAO,UAAUC,uBAAV,CAAmCC,QAAnC,EAA6C;AAEhD,QAAMC,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BG,QAA5B,CAA1B;AAEA,QAAME,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AAEA,QAAMd,GAAG,CAELI,aAAa,CAAC;AAAEW,IAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmB,OAAGF,QAAQ,CAACG,IAAT;AAAtB,GAAD,CAFR,CAAT;AAMH;AACD,OAAO,UAAUC,gBAAV,GAA6B;AAEhC,MAAI;AAEG,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACa,eAAL,CAAqBZ,cAArB,CAAvB;AAGC,UAAMG,uBAAuB,CAACQ,IAAD,CAA7B;AAIP,GATD,CASE,OAAOE,KAAP,EAAc;AAEZ,UAAMpB,GAAG,CAAEK,aAAa,CAACe,KAAD,CAAf,CAAT;AACH;AACJ;AAGD,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAE/D,MAAI;AAEA,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AAEA,UAAMd,uBAAuB,CAACQ,IAAD,CAA7B;AAIH,GARD,CAQE,OAAOE,KAAP,EAAc;AAEZ,UAAMpB,GAAG,CACDK,aAAa,CAACe,KAAD,CADZ,CAAT;AAGH;AACJ;AAED,OAAO,UAAUM,mBAAV,GAA+B;AAE/B,QAAM3B,UAAU,CAACI,eAAe,CAACwB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACN;AAED,OAAO,UAAUW,kBAAV,GAA+B;AAElC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,mBAAjB,EAAsCR,eAAtC,CAAhB;AACH;AAGD,OAAO,UAAWS,mBAAX,GAAiC;AACrC,MAAI;AAEA,UAAMnB,QAAQ,GAAG,MAAMF,cAAc,EAArC;AAEA,QAAG,CAACE,QAAJ,EAAc;AAEdD,IAAAA,uBAAuB,CAACC,QAAD,CAAvB;AAEH,GARD,CAQE,OAAOS,KAAP,EAAc;AAEb,UAAMpB,GAAG,CAELK,aAAa,CAACe,KAAD,CAFR,CAAT;AAIF;AAEH;AACD,OAAQ,UAAUW,SAAV,GAAsB;AAE1B,QAAM7B,GAAG,CAAC,CAAED,IAAI,CAACyB,mBAAD,CAAN,EAA6BzB,IAAI,CAAC2B,kBAAD,CAAjC,CAAD,CAAT;AAEH","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects'\n\n\nimport UserActionTypes from './user.types'\n\nimport {  signInSuccess, signInFailure} from './user.actions'\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from './../../firebase/firebase.utils'\n\n\nexport function* getSnapshotFromUserAuth( userAuth) {\n\n    const userRef = yield call(createUserProfileDocument, userAuth)\n\n    const snapShot = yield userRef.get()\n\n    yield put(\n\n        signInSuccess({ id: snapShot.id, ...snapShot.data() })\n\n    )\n\n}\nexport function* signInWithGoogle() {\n\n    try {\n        \n           const { user } = yield auth.signInWithPopup(googleProvider)\n\n\n            yield getSnapshotFromUserAuth(user)\n\n   \n\n    } catch (error) {\n        \n        yield put( signInFailure(error))\n    }\n}\n\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n\n    try {\n\n        const { user } = yield auth.signInWithEmailAndPassword(email, password)\n        \n        yield getSnapshotFromUserAuth(user)\n\n     \n\n    } catch (error) {\n\n        yield put(\n                signInFailure(error)\n             )\n    }\n}\n\nexport function* onGoogleSignInStart(){\n\n       yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\n\nexport function * isUserAuthenticated() {\n   try {\n\n       const userAuth = yield getCurrentUser()\n\n       if(!userAuth) return \n       \n       getSnapshotFromUserAuth(userAuth)\n       \n   } catch (error) {\n       \n      yield put (\n\n          signInFailure(error)\n      )\n   }\n \n}\nexport  function* userSagas() {\n    \n    yield all([ call(onGoogleSignInStart), call(onEmailSignInStart)])\n\n}"]},"metadata":{},"sourceType":"module"}