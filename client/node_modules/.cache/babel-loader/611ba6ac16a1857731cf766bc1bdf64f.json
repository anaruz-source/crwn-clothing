{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsStartAsync() {\n  yield console.log('YOPII Fired!!!!');\n  const collectionRef = firestore.collection('collection'); // collectionRef.get().then(async shot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(shot)\n  //     dispatch(fetchCollectionsSuccess(collectionsMap))\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.errorMessage)))\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsStartAsync);\n}","map":{"version":3,"sources":["/home/anaruz/www/react/crwn-cloth-learning/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsStartAsync","console","log","collectionRef","collection","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAAyB,oBAAzB;AAEA,OAASC,eAAT,MAA+B,cAA/B;AAGA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAAUC,uBAAV,EAAmCC,uBAAnC,QAAkE,gBAAlE;AAEA,OAAO,UAAWC,0BAAX,GAAwC;AAE3C,QAAMC,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAN;AAGA,QAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,YAArB,CAAtB,CAL2C,CAQ3C;AAEA;AAEA;AAEA;AACH;AAGD,OAAO,UAAUC,qBAAV,GAAiC;AAEtC,QAAOX,SAAS,CAAEC,eAAe,CAACW,uBAAlB,EAA4CN,0BAA5C,CAAhB;AACD","sourcesContent":["import { takeEvery} from 'redux-saga/effects'\n\nimport   ShopActionTypes  from './shop.types'\n\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\n\nimport  { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\n\nexport function*  fetchCollectionsStartAsync() {\n\n    yield console.log('YOPII Fired!!!!')\n\n\n    const collectionRef = firestore.collection('collection')\n\n\n    // collectionRef.get().then(async shot => {\n\n    //     const collectionsMap = convertCollectionsSnapshotToMap(shot)\n\n    //     dispatch(fetchCollectionsSuccess(collectionsMap))\n\n    // }).catch(error => dispatch(fetchCollectionsFailure(error.errorMessage)))\n}\n\n\nexport function* fetchCollectionsStart(){\n\n  yield  takeEvery( ShopActionTypes.FETCH_COLLECTIONS_START,  fetchCollectionsStartAsync)\n}"]},"metadata":{},"sourceType":"module"}